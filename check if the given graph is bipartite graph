public class Solution {
    public boolean isBipartite(int[][] G, int n) {
        if(n < 2) return false;
        // build the graph
        HashMap<Integer, HashSet<Integer>> graph = new HashMap<Integer, HashSet<Integer>>();
        for(int i = 0; i < n; ++i) graph.put(i, new HashSet<Integer>());
        for(int i = 0; i < G.length; ++i)
        {
        	int val1 = G[i][0];
        	int val2 = G[i][1];
        	graph.get(val1).add(val2);
        	graph.get(val2).add(val1);
        }
        // BFS
        int[] color = new int[n];
        Queue<Integer> queue = new LinkedList<Integer>();
        queue.offer(0);
        color[0] = 1;
        while(!queue.isEmpty())
        {
        	int size = queue.size();
        	for(int i = 0; i < size; ++i)
        	{
        		int u = queue.poll();
            	for(int v: graph.get(u))
            	{
            		if(color[v] == color[u]) return false;
            		else if(color[v] == 0)
            		{
            			color[v] = foo(color[u]);
            			queue.offer(v);
            		}
            	}            	
        	}        	        	
        }
        for(int i = 0; i < n; ++i)
        {
        	if(color[i] == 0) return false;
        }
        return true;
    }

    private int foo(int u)
    {
    	if(u == 1) return -1;
    	else return 1;
    }
    public static void main(String[] args) {
    	int[][] G = {{0, 1}, {1, 2}, {2, 3}, {3, 0}};
    	int n = 4;    	
    	/*int[][] G = {{0, 1}, {1, 2}, {0, 2}};
    	int n = 3;*/
    	Solution mySolution = new Solution();
    	boolean res = mySolution.isBipartite(G, n);    	    	        	    	
    	System.out.println(res);
    }
}
