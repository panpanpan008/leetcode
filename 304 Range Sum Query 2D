// Leetcode 304 Range Sum Query 2D - Immutable
public class NumMatrix {

    private int[] segmentSumTree;
    private int row;
    private int col;
    
    public NumMatrix(int[][] matrix) {
        if(matrix == null || matrix.length == 0)
        {
            row = 0;
            col = 0;
        }
        else
        {
            row = matrix.length;
            col = matrix[0].length;
            int m = getNextPowerOf4(row*col);
            segmentSumTree = new int[(4*m-1)/3];
            buildSegmentSumTree(segmentSumTree, matrix, 0, row-1, 0, col-1, 0);
        }
    }
    
    private int getNextPowerOf4(int n)
    {
        int p = (int)(Math.log(n)/Math.log(4));
        if(n > (int)Math.pow(4, p)) return (int)Math.pow(4, p+1);
        else return n;
    }
    
    private void buildSegmentSumTree(int[] segmentSumTree, int[][] matrix, int rowL, int rowH, int colL, int colH, int pos)
    {
        if(rowL == rowH && colL == colH) segmentSumTree[pos] = matrix[rowL][colL];
        else if(rowL > rowH || colL > colH) segmentSumTree[pos] = 0;
        else
        {
        	int rowM = rowL + (rowH - rowL)/2;
            int colM = colL + (colH - colL)/2;
            buildSegmentSumTree(segmentSumTree, matrix, rowL, rowM, colL, colM, 4*pos+1);
            buildSegmentSumTree(segmentSumTree, matrix, rowL, rowM, colM+1, colH, 4*pos+2);
            buildSegmentSumTree(segmentSumTree, matrix, rowM+1, rowH, colL, colM, 4*pos+3);
            buildSegmentSumTree(segmentSumTree, matrix, rowM+1, rowH, colM+1, colH, 4*pos+4);
            segmentSumTree[pos] = segmentSumTree[4*pos+1]+segmentSumTree[4*pos+2]+segmentSumTree[4*pos+3]+segmentSumTree[4*pos+4];  
        }        
    }
    
    public int sumRegion(int row1, int col1, int row2, int col2) {
        if(row == 0 || col == 0) return 0;
        else return querySumRegion(segmentSumTree, 0, 0, row-1, col-1, row1, col1, row2, col2, 0);
    }
    
    private int querySumRegion(int[] segmentSumTree, int rowL, int colL, int rowH, int colH, int qRowL, int qColL, int qRowH, int qColH, int pos)
    {
        if(qRowL <= rowL && qRowH >= rowH && qColL <= colL && qColH >= colH) return segmentSumTree[pos];
        else if(rowH < qRowL || qRowH < rowL || colH < qColL || qColH < colL) return 0;
        else
        {
            int rowM = rowL + (rowH-rowL)/2;
            int colM = colL + (colH-colL)/2;
            int val1 = querySumRegion(segmentSumTree, rowL, colL, rowM, colM, qRowL, qColL, qRowH, qColH, 4*pos+1);
            int val2 = querySumRegion(segmentSumTree, rowL, colM+1, rowM,  colH, qRowL, qColL, qRowH, qColH, 4*pos+2);
            int val3 = querySumRegion(segmentSumTree, rowM+1, colL, rowH, colM, qRowL, qColL, qRowH,  qColH, 4*pos+3);
            int val4 = querySumRegion(segmentSumTree, rowM+1, colM+1, rowH,  colH, qRowL, qColL, qRowH, qColH, 4*pos+4);
            return val1+val2+val3+val4;
        }
    }
}


// Your NumMatrix object will be instantiated and called as such:
// NumMatrix numMatrix = new NumMatrix(matrix);
// numMatrix.sumRegion(0, 1, 2, 3);
// numMatrix.sumRegion(1, 2, 3, 4);
